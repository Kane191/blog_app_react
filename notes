This is where I'll be writing what I wish to achieve through this app, a to do 
list of what needs to be done and what is done so far.
It will also have a mini documentation of how it works 







Mini documentation

    TO RUN CLIENT : cd client, npm start
    TO RUN SERVER : cd server, npm server




Learned today

    for the server, you need to keep listening to the server. 
    That is how it is able to save real time.
    Also to use npm start on server you need to rename your main file server.js
    or add a script to your package.json eg:

        "scripts": {
            "start": "node your-script.js"
        }

    This piece of code below is what enables navigating to different links. We have imported it in blog front page.

        import {BrowserRouter as Router, Route} from "react-router-dom"

    App.js is an important file as it has the id root. It appears in every other page so you
    can add stuff you want in other pages or add nothing.
    In this page you add a router tag that changes the content of the page based on the url.

    Example of router tag:

        <Router>
            <Routes>
                <Route path = "/" element={<Blogs />} />
                <Route path = "/createpost" element={<CreatePost />} />
            </Routes>
        </Router>

    To center an element using margin auto, the element must be:

        1. The element must be block-level, e.g. display: block or display: table
        2. The element must not float
        3. The element must not have a fixed or absolute position1
        4. The element must have a width that is not auto

    If you want to center an element that has display flex, you use justify content 
    center.

    From the frontend section we use 'axios' to retrieve all the data.
    Then we store the data in the useState hook.
    After that we use the useEffect hook to display the data.

    When you want to transfer data from one component to another you can use props eg:

        <Post props={val} />

    I've learnt how to save an image in a different folder but I've just realized that I can't display the images I've saved on my frontend because you need to first import images in order to display them but you see I can't import dynamically. So now I see why pple use mongo db for mern stack
    We need to study the lifecycle of handling images in mern stack. Also why it can't be sern.
    Not yet found a reason why it can't be sern.
    Also a react component has to have camel case eg ReactComponent esp when you trying to redirect.
    Actually all of your react components/ js files must be in camelcase or they give you problems in the future ie ReactFile

    <!-- Thoughts -->
    Not everything is going to be perfect in this application. The reason we started this app is not to achieve perfection but to learn more about react.
    Have you learnt about react? absolutely
    Then you have no right whatsoever to be dissapointed in yourself after coming this far.
    Let's finish this app without trying to perfect everything.
    Learning over perfection is key.

    How to add material icons in react


     1. install material icon: npm install @material-ui/core @material-ui/icons

     2. import the icon you will use: import MenuIcon from '@material-ui/icons/Menu';

     3. use the icon: <MenuIcon/>

    You can also use https://material-ui.com/components/material-icons/ to search for the icon you need.



Done today

    did a figma design of the homepage of tokki blog



Todo List:

    design homepage ✔
    check if it is connected to git ✔
    separate app.js styles from homepage styles ✔
    do post html ✔
    do post css✔
    do homepage html✔
    retrieve all posts from db✔
    design create post form✔
    do create post form css✔
    check how to add id automatically on create post✔
    add field to add pictures for the post✔
    add pictures to db✔
    research how to display images dynamically from file system✔
    display images on front page✔
    validation✔
    On create post; redirect to home page afterwards✔
    design read more page✔
    create the read more page✔
    read more to lead to a different page.✔
    design register users form✔
    do register users form css✔
    register users backend✔
    login users backend✔
    set session and cookies✔
    use jwt✔
    
    like blog posts
    update post
    delete post

    <!-- for the todos remaining, though they are few there is a roadblock which is how to display the images dynamically also on the read more different page it may give the same problem but I'm hoping to be done in 2 weeks. Let's set codersbox start date to be 4th June latest. -->

    <!-- naming -->
    -Components
        -posts
        -post
        -create post
        -post details
    -Styles
        -inherit name